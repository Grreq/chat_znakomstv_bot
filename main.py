import asyncio
# import requests
from aiogram import Dispatcher, Bot, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from config import TOKEN

dp = Dispatcher()
admin_id = "1244894486"

login_user = 'http://localhost:8001/api/v1/accounts/login/'

params = {'user_id': 1244894486}


class Reg(StatesGroup):
    age = State()
    gender = State()
    choose_gender = State()
    name = State()
    city = State()
    description = State()
    photo = State()


@dp.message(CommandStart())
async def registration(message: Message, state: FSMContext):
    await state.set_state(Reg.age)
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!üñê\n\n–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")


@dp.message(Reg.age)
async def age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –∏—Å–∫–ª—é—á–∞—è –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã!')
    else:
        await state.update_data(age=message.text)
        await state.set_state(Reg.gender)
        text = '–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è –∫–∞–∫–æ–≤ —Ç–≤–æ–π –ø–æ–ª?'
        male = KeyboardButton(text='–Ø –ø–∞—Ä–µ–Ω—å')
        female = KeyboardButton(text='–Ø –¥–µ–≤—É—à–∫–∞')
        markup = ReplyKeyboardMarkup(keyboard=[[male, female]], resize_keyboard=True, one_time_keyboard=True)
        await message.answer(text, reply_markup=markup)


@dp.message(Reg.gender)
async def gender(message: Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await state.set_state(Reg.choose_gender)

    womans = KeyboardButton(text='–î–µ–≤—É—à–∫–∏')
    men = KeyboardButton(text='–ü–∞—Ä–Ω–∏')
    markup = ReplyKeyboardMarkup(keyboard=[[womans, men]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?", reply_markup=markup)


@dp.message(Reg.choose_gender)
async def step_two(message: Message, state: FSMContext):
    await state.update_data(choose_gender=message.text)
    await state.set_state(Reg.name)
    await message.answer('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')


@dp.message(Reg.name)
async def step_three(message: Message, state: FSMContext):
    if any(map(lambda x: x.isdigit(), message.text)):
        await state.set_state(Reg.name)
        await message.answer('–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏—Å–∫–ª—é—á–∞—è —Ü–∏—Ñ—Ä—ã!üî†')
    else:
        await state.update_data(name=message.text)
        await message.answer('–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?üèô')
        await state.set_state(Reg.city)


@dp.message(Reg.city)
async def step_four(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(Reg.description)
    skip = KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    markup = ReplyKeyboardMarkup(keyboard=[[skip]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer('–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ –Ω–∏–±—É–¥—å –æ —Å–µ–±–µ', reply_markup=markup)


@dp.message(Reg.description)
async def step_five(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(Reg.photo)

    skip = KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    markup = ReplyKeyboardMarkup(keyboard=[[skip]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –µ–≥–æ —Å–º–æ–≥—É—Ç —É–≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', reply_markup=markup)


@dp.message(Reg.photo)
async def final_reg(message: Message, state: FSMContext):
    # register_user = 'http://localhost:8001/api/v1/accounts/register/'
    await state.update_data(photo=message.photo)
    await message.answer(f"–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:")
    start = KeyboardButton(text="–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç!")
    markup = ReplyKeyboardMarkup(keyboard=[[start]], resize_keyboard=True)
    data = await state.get_data()
    body = {
        "user_id": message.from_user.id,
        "username": message.from_user.username,
        "name": data['name'],
        "age": data['age'],
        "description": data['description'] if data['description'] != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None,
        "city": data['city'],
        "who_looking": data['choose_gender'],
        "gender": data['gender']
    }
    print(body)
    if data['photo'] is None and data['description'] == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await message.answer(f'{data['name']}, {data['age']}, {data['city']}',
                             reply_markup=markup)
    elif data['photo'] is None:
        await message.answer(f'{data['name']}, {data['age']}, {data['city']}\n{data['description']}',
                             reply_markup=markup)
    elif data['description'] == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await message.answer_photo(data['photo'][-1].file_id,
                                   f'{data['name']}, {data['age']}, {data['city']}',
                                   reply_markup=markup)
    else:
        await message.answer_photo(data['photo'][-1].file_id,
                                   caption=f'{data['name']}, {data['age']}, {data['city']}\n{data['description']}',
                                   reply_markup=markup)

    # response = requests.post(url=register_user, data=body)
    await state.clear()


@dp.message(Command('profile'))
async def send_data(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(f'{data['name']}, {data['age']}, {data['description']}')


@dp.message(F.text == '–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç!')
async def begin(message: Message):
    heart = KeyboardButton(text='‚ù§Ô∏è')
    dislike = KeyboardButton(text='üëé')
    mini_message = KeyboardButton(text='üíå')
    markup = ReplyKeyboardMarkup(keyboard=[[heart, dislike, mini_message]], resize_keyboard=True)
    await message.answer(text='–¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç...', reply_markup=markup)


async def main():
    bot = Bot(TOKEN)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt as e:
        print('Exit')
