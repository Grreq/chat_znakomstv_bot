from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

from keyboards import registration_keyboards as reg_kb, main_keyboards as m_kb

router = Router()


class Reg(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    age = State()
    gender = State()
    choose_gender = State()
    name = State()
    city = State()
    description = State()
    photo = State()


@router.message(CommandStart())
async def registration(message: Message, state: FSMContext):
    """ Handler —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ /start.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (State): –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    await state.set_state(Reg.age)
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!üñê\n\n–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")


@router.message(Reg.age)
async def age(message: Message, state: FSMContext):
    """ Handler —Å–æ—Å—Ç–æ—è–Ω–∏—è age.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (State): –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –∏—Å–∫–ª—é—á–∞—è –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã!')
    else:
        await state.update_data(age=message.text)
        await state.set_state(Reg.gender)
        await message.answer('–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è –∫–∞–∫–æ–≤ —Ç–≤–æ–π –ø–æ–ª?', reply_markup=reg_kb.choose_gender_keyboard())


@router.message(Reg.gender)
async def gender(message: Message, state: FSMContext):
    """ Handler —Å–æ—Å—Ç–æ—è–Ω–∏—è gender.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (State): –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    await state.update_data(gender=message.text)
    await state.set_state(Reg.choose_gender)
    await message.answer("–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?", reply_markup=reg_kb.choose_who_looking())


@router.message(Reg.choose_gender)
async def choose_gender(message: Message, state: FSMContext):
    """ Handler —Å–æ—Å—Ç–æ—è–Ω–∏—è choose_gender.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (State): –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    await state.update_data(choose_gender=message.text)
    await state.set_state(Reg.name)
    await message.answer('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')


@router.message(Reg.name)
async def name(message: Message, state: FSMContext):
    """ Handler —Å–æ—Å—Ç–æ—è–Ω–∏—è name.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (State): –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    if any(map(lambda x: x.isdigit(), message.text)):
        await state.set_state(Reg.name)
        await message.answer('–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏—Å–∫–ª—é—á–∞—è —Ü–∏—Ñ—Ä—ã!üî†')
    else:
        await state.update_data(name=message.text)
        await message.answer('–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?üèô')
        await state.set_state(Reg.city)


@router.message(Reg.city)
async def city(message: Message, state: FSMContext):
    """ Handler —Å–æ—Å—Ç–æ—è–Ω–∏—è city.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (State): –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    await state.update_data(city=message.text)
    await state.set_state(Reg.description)
    await message.answer('–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ –Ω–∏–±—É–¥—å –æ —Å–µ–±–µ', reply_markup=m_kb.skip_keyboard())


@router.message(Reg.description)
async def description(message: Message, state: FSMContext):
    """ Handler —Å–æ—Å—Ç–æ—è–Ω–∏—è description.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (State): –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    await state.update_data(description=message.text)
    await state.set_state(Reg.photo)
    await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –µ–≥–æ —Å–º–æ–≥—É—Ç —É–≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                         reply_markup=m_kb.skip_keyboard())


@router.message(Reg.photo)
async def final_step_registration(message: Message, state: FSMContext):
    """ Handler —Å–æ—Å—Ç–æ—è–Ω–∏—è photo.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (State): –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    await state.update_data(photo=message.photo)
    await message.answer(f"–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:")
    data = await state.get_data()
    # body = {
    #     "user_id": message.from_user.id,
    #     "username": message.from_user.username,
    #     "name": data['name'],
    #     "age": data['age'],
    #     "description": data['description'] if data['description'] != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None,
    #     "city": data['city'],
    #     "who_looking": data['choose_gender'],
    #     "gender": data['gender']
    # }
    if data['photo'] is None and data['description'] == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        text = f'{data["name"]}, {data["age"]}, {data["city"]}'
        await message.answer(f'{data["name"]}, {data["age"]}, {data["city"]}',
                             reply_markup=reg_kb.start_looking_cards())
    elif data['photo'] is None:
        text = f'{data["name"]}, {data["age"]}, {data["city"]}\n{data["description"]}'
        await message.answer(f'{data["name"]}, {data["age"]}, {data["city"]}\n{data["description"]}',
                             reply_markup=reg_kb.start_looking_cards())
    elif data['description'] == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        text = f'{data["name"]}, {data["age"]}, {data["city"]}'
        photo = data['photo'][-1].file_id
    else:
        text = f'{data["name"]}, {data["age"]}, {data["city"]}\n{data["description"]}'
        photo = data['photo'][-1].file_id
    if data['photo']:
        await message.answer_photo(photo, caption=text, reply_markup=m_kb.start_looking_cards())
    else:
        await message.answer(text, reply_markup=m_kb.start_looking_cards())

    # response = requests.post(url='http://localhost:8001/api/v1/accounts/register/', data=body)
    await state.clear()
